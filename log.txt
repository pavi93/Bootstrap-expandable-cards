<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- ... other configuration ... -->

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- Use %mdc{key} to include MDC values in the log pattern -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] API [%logger{36}] - RequestBody: %mdc{requestBody}, AuthorizationHeader: %mdc{authorizationHeader} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- ... other loggers ... -->

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
    </root>
</configuration>


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class ApiController {
    private static final Logger logger = LoggerFactory.getLogger(ApiController.class);

    @PostMapping("/endpoint")
    public String handleRequest(@RequestBody String requestBody, @RequestHeader("Authorization") String authorizationHeader) {
        // Capture the request body and headers and set them in the MDC
        MDC.put("requestBody", requestBody);
        MDC.put("authorizationHeader", authorizationHeader);

        // Log the API request
        logger.info("API request received");

        // ... your API logic ...

        // Clear the MDC when done
        MDC.clear();

        return "Response";
    }
}

  GET("/{path:^(?!api$).*$}/**"), 
            request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).bodyValue("forward:/index.html")
			
			 public RouterFunction<ServerResponse> forwardToIndex() {
        return RouterFunctions.route()
            .path("/", builder -> builder
                .resources("/**", new ClassPathResource("static/"))
                .nest(accept(MediaType.TEXT_HTML), nestedBuilder -> nestedBuilder
                    .GET("/", this::forwardToIndexHtml)
                )
            )
            .build();
    }

    private Mono<ServerResponse> forwardToIndexHtml(ServerRequest request) {
        return ServerResponse.ok()
            .contentType(MediaType.TEXT_HTML)
            .body(BodyInserters.fromResource(new ClassPathResource("static/index.html")));
    }
}
In this configuration:

Static resources are served from the static folder using .resources("/**", new ClassPathResource("static/")).
Requests for HTML resources are captured and forwarded to the forwardToIndexHtml method, which serves the index.html file using BodyInserters.fromResource(new ClassPathResource("static/index.html")).
HTML File Location:

Ensure that your index.html file is located in the expected directory, which should be within the resources/static folder.

Base Href:

Double-check that the <base href="/"> tag in your index.html file is correctly set to match the context path where your Angular app is hosted.

With this configuration, client-side routing in your Angular application should work as expected, and deep routes should be properly handled by serving the index.html file.





@Configuration
public class WebFluxConfig implements WebFluxConfigurer {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/static/**")
                .addResourceLocations("classpath:/static/")
                .setCachePeriod(0); // Disable caching for development, adjust for production
    }
}

... | eval your_field = replace(your_field, "(abcd|efee|xyz)", "case(match(\1, \"abcd\"), \"author\", match(\1, \"efee\"), \"book\", match(\1, \"xyz\"), \"price\", \1)")
