
import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.greenscart.model.ErrorResponse;
import com.greenscart.utils.JWTUtils;

import io.jsonwebtoken.Claims;


@Component
public class ValidationFilter implements Filter{

	@Autowired
	JWTUtils jwtUtils;
	
	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		System.out.println("INTO FILTER");
		HttpServletRequest httpRequest = (HttpServletRequest) request;
		HttpServletResponse  httpResponse= (HttpServletResponse) response;
		   if(jwtUtils==null){
			   System.out.println("JWT UTILS empty, fetch from APP context");
	            ServletContext servletContext = request.getServletContext();
	            WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);
	            jwtUtils = webApplicationContext.getBean(JWTUtils.class);
	        }
		String jwt = httpRequest.getHeader("token");
		System.out.println(jwt);
		if(jwt!=null) {
		Claims claimSet = jwtUtils.readJWT(jwt);
		if(jwtUtils.validateJWT(claimSet)) {
			System.out.println("JWT Valid ");
			MutableHttpServletRequest mutableRequest = new MutableHttpServletRequest(httpRequest);
			System.out.println(claimSet.get("userId"));
			mutableRequest.putHeader("emailId",(String) claimSet.get("userId"));
			System.out.println("Header after set "+mutableRequest.getHeader("emailId"));
			chain.doFilter(mutableRequest, response);
			httpResponse.setHeader("token", jwt);
		}
		else {
			ErrorResponse errResp = new ErrorResponse();
			errResp.setCode("403");
			errResp.setType("Error");
			errResp.setDetails("ServiceAuth Expired");
			
			httpResponse.setStatus(HttpStatus.FORBIDDEN.value());
			httpResponse.getWriter().write(new ObjectMapper().writeValueAsString(errResp));

		}
			
		}
		
		
	}

}